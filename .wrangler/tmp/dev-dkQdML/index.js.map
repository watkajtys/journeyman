{
  "version": 3,
  "sources": ["../bundle-iZJp1F/checked-fetch.js", "../../../src/index.js", "../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../../../node_modules/wrangler/templates/middleware/middleware-miniflare3-json-error.ts", "../bundle-iZJp1F/middleware-insertion-facade.js", "../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-iZJp1F/middleware-loader.entry.ts"],
  "sourceRoot": "C:\\Users\\watka\\Projects\\journeyman\\.wrangler\\tmp\\dev-dkQdML",
  "sourcesContent": ["const urls = new Set();\n\nfunction checkURL(request, init) {\n\tconst url =\n\t\trequest instanceof URL\n\t\t\t? request\n\t\t\t: new URL(\n\t\t\t\t\t(typeof request === \"string\"\n\t\t\t\t\t\t? new Request(request, init)\n\t\t\t\t\t\t: request\n\t\t\t\t\t).url\n\t\t\t\t);\n\tif (url.port && url.port !== \"443\" && url.protocol === \"https:\") {\n\t\tif (!urls.has(url.toString())) {\n\t\t\turls.add(url.toString());\n\t\t\tconsole.warn(\n\t\t\t\t`WARNING: known issue with \\`fetch()\\` requests to custom HTTPS ports in published Workers:\\n` +\n\t\t\t\t\t` - ${url.toString()} - the custom port will be ignored when the Worker is published using the \\`wrangler deploy\\` command.\\n`\n\t\t\t);\n\t\t}\n\t}\n}\n\nglobalThis.fetch = new Proxy(globalThis.fetch, {\n\tapply(target, thisArg, argArray) {\n\t\tconst [request, init] = argArray;\n\t\tcheckURL(request, init);\n\t\treturn Reflect.apply(target, thisArg, argArray);\n\t},\n});\n", "// Generate a secure random token\r\nfunction generateToken() {\r\n  const array = new Uint8Array(32);\r\n  crypto.getRandomValues(array);\r\n  return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n}\r\n\r\n// Store active admin sessions (in production, use KV or Durable Objects)\r\nconst adminSessions = new Map();\r\n\r\n/**\r\n * Default export for the Cloudflare Worker.\r\n * This worker handles API requests for loading and saving story data.\r\n */\r\nexport default {\r\n  /**\r\n   * Handles incoming requests to the Cloudflare Worker.\r\n   * It routes requests to either load or save story data based on the URL path and HTTP method.\r\n   *\r\n   * @param {Request} request - The incoming HTTP request.\r\n   * @param {object} env - The environment variables, including the STORY_STORAGE KV namespace.\r\n   * @param {object} ctx - The execution context of the request.\r\n   * @returns {Response} The response to the request.\r\n   */\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    \r\n    // Verify admin token helper\r\n    const verifyAdminToken = (token) => {\r\n      if (!token) return false;\r\n      // Also check against env secret for backwards compatibility\r\n      if (token === env.ADMIN_KEY) return true;\r\n      const session = adminSessions.get(token);\r\n      if (!session) return false;\r\n      if (session.expiresAt < Date.now()) {\r\n        adminSessions.delete(token);\r\n        return false;\r\n      }\r\n      return true;\r\n    };\r\n\r\n    // Handle admin authentication endpoint\r\n    if (url.pathname === '/api/admin/auth' && request.method === 'POST') {\r\n      try {\r\n        const { accessCode } = await request.json();\r\n        \r\n        // Check against secure environment variable\r\n        if (accessCode === env.ADMIN_ACCESS_CODE) {\r\n          const token = generateToken();\r\n          const expiresAt = Date.now() + (2 * 60 * 60 * 1000); // 2 hours\r\n          \r\n          // Store session\r\n          adminSessions.set(token, { expiresAt });\r\n          \r\n          // Clean up expired sessions\r\n          for (const [key, value] of adminSessions.entries()) {\r\n            if (value.expiresAt < Date.now()) {\r\n              adminSessions.delete(key);\r\n            }\r\n          }\r\n          \r\n          return new Response(JSON.stringify({ \r\n            success: true, \r\n            token,\r\n            expiresAt \r\n          }), {\r\n            status: 200,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        }\r\n        \r\n        return new Response(JSON.stringify({ \r\n          success: false, \r\n          error: 'Invalid access code' \r\n        }), {\r\n          status: 401,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      } catch (err) {\r\n        return new Response(JSON.stringify({ \r\n          success: false, \r\n          error: 'Authentication failed' \r\n        }), {\r\n          status: 500,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Block direct access to /editor/ unless admin token is valid\r\n    if (url.pathname.startsWith('/editor/') || url.pathname === '/editor') {\r\n      const token = request.headers.get('X-Admin-Token') || \r\n                    url.searchParams.get('token') ||\r\n                    url.searchParams.get('phoenixadmin'); // Legacy support\r\n      \r\n      // Check token or legacy access code\r\n      const isValid = verifyAdminToken(token) || \r\n                      (url.searchParams.get('phoenixadmin') === env.ADMIN_ACCESS_CODE);\r\n      \r\n      if (!isValid) {\r\n        // Redirect to main page instead of showing editor\r\n        return Response.redirect(new URL('/', url.origin).toString(), 302);\r\n      }\r\n    }\r\n\r\n    // Handle image generation requests (admin only)\r\n    if (url.pathname === '/api/generate-image' && request.method === 'POST') {\r\n      try {\r\n        // Check for admin authorization using secure token\r\n        const token = request.headers.get('X-Admin-Token') || request.headers.get('X-Admin-Key');\r\n        if (!verifyAdminToken(token)) {\r\n          return new Response(JSON.stringify({ \r\n            error: 'Image generation not available',\r\n            message: 'This is the end of the currently rendered narrative. More content coming soon!'\r\n          }), { \r\n            status: 403,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        }\r\n\r\n        // Admin is authorized, proceed with generation\r\n        if (!env.GEMINI_API_KEY) {\r\n          return new Response(JSON.stringify({ error: 'API key not configured' }), { \r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        }\r\n\r\n        const requestData = await request.json();\r\n        const { prompt, contextImage } = requestData;\r\n\r\n        // Build the API request to Gemini\r\n        const apiUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash-exp:generateContent';\r\n        \r\n        const parts = [{\r\n          text: prompt\r\n        }];\r\n        \r\n        if (contextImage) {\r\n          parts.push({\r\n            inlineData: {\r\n              mimeType: \"image/png\",\r\n              data: contextImage\r\n            }\r\n          });\r\n        }\r\n\r\n        const response = await fetch(`${apiUrl}?key=${env.GEMINI_API_KEY}`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          body: JSON.stringify({\r\n            contents: [{\r\n              parts: parts\r\n            }],\r\n            generationConfig: {\r\n              temperature: 0.9,\r\n              topK: 32,\r\n              topP: 1,\r\n              maxOutputTokens: 8192,\r\n              responseMimeType: \"application/json\",\r\n              responseSchema: {\r\n                type: \"object\",\r\n                properties: {\r\n                  image: {\r\n                    type: \"string\"\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          })\r\n        });\r\n\r\n        if (!response.ok) {\r\n          const errorText = await response.text();\r\n          console.error('Gemini API error:', errorText);\r\n          return new Response(JSON.stringify({ error: 'Generation failed' }), { \r\n            status: 500,\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        }\r\n\r\n        const result = await response.json();\r\n        return new Response(JSON.stringify(result), {\r\n          status: 200,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error('Image generation error:', err);\r\n        return new Response(JSON.stringify({ \r\n          error: 'Generation failed', \r\n          message: err.message \r\n        }), { \r\n          status: 500,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Handle the API request to load the story\r\n    if (url.pathname === '/api/load' && request.method === 'GET') {\r\n      try {\r\n        const storyObject = await env.STORY_STORAGE.get('story.json');\r\n\r\n        if (storyObject === null) {\r\n          return new Response(JSON.stringify({ status: 'not_found', message: 'No saved story found in cloud storage.' }), {\r\n            headers: { 'Content-Type': 'application/json' },\r\n            status: 404,\r\n          });\r\n        }\r\n\r\n        // The object has a .text() method to get the body as a string.\r\n        const storyData = await storyObject.text();\r\n        return new Response(storyData, {\r\n          headers: { \r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          },\r\n          status: 200,\r\n        });\r\n\r\n      } catch (err) {\r\n        console.error(err);\r\n        return new Response('Error: Could not load story data.', { status: 500 });\r\n      }\r\n    }\r\n    \r\n    // Handle image upload (protected)\r\n    if (url.pathname.startsWith('/api/images/') && request.method === 'PUT') {\r\n      try {\r\n        // Check for admin authorization\r\n        const token = request.headers.get('X-Admin-Token') || request.headers.get('X-Admin-Key');\r\n        if (!verifyAdminToken(token)) {\r\n          return new Response('Unauthorized', { \r\n            status: 403,\r\n            headers: { 'Access-Control-Allow-Origin': '*' }\r\n          });\r\n        }\r\n        \r\n        const nodeId = decodeURIComponent(url.pathname.split('/').pop());\r\n        const imageData = await request.arrayBuffer();\r\n        \r\n        // Validate image size (max 10MB)\r\n        if (imageData.byteLength > 10 * 1024 * 1024) {\r\n          return new Response('Image too large (max 10MB)', { \r\n            status: 413,\r\n            headers: { 'Access-Control-Allow-Origin': '*' }\r\n          });\r\n        }\r\n        \r\n        // Store image in R2 with sanitized path\r\n        const imagePath = `images/${encodeURIComponent(nodeId)}.png`;\r\n        await env.STORY_STORAGE.put(imagePath, imageData, {\r\n          httpMetadata: {\r\n            contentType: 'image/png',\r\n          }\r\n        });\r\n        \r\n        return new Response(JSON.stringify({ \r\n          success: true, \r\n          path: imagePath \r\n        }), {\r\n          status: 200,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error('Image upload error:', err);\r\n        return new Response(JSON.stringify({ \r\n          error: 'Upload failed', \r\n          message: err.message \r\n        }), { \r\n          status: 500,\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      }\r\n    }\r\n    \r\n    // Handle image retrieval\r\n    if (url.pathname.startsWith('/api/images/') && request.method === 'GET') {\r\n      try {\r\n        const nodeId = decodeURIComponent(url.pathname.split('/').pop());\r\n        const imagePath = `images/${encodeURIComponent(nodeId)}.png`;\r\n        const imageObject = await env.STORY_STORAGE.get(imagePath);\r\n        \r\n        if (!imageObject) {\r\n          return new Response('Image not found', { \r\n            status: 404,\r\n            headers: { 'Access-Control-Allow-Origin': '*' }\r\n          });\r\n        }\r\n        \r\n        const imageData = await imageObject.arrayBuffer();\r\n        return new Response(imageData, {\r\n          status: 200,\r\n          headers: {\r\n            'Content-Type': 'image/png',\r\n            'Cache-Control': 'public, max-age=3600',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error('Image retrieval error:', err);\r\n        return new Response('Error retrieving image', { \r\n          status: 500,\r\n          headers: { 'Access-Control-Allow-Origin': '*' }\r\n        });\r\n      }\r\n    }\r\n\r\n    // Handle the API request to save the story (admin only)\r\n    if (url.pathname === '/api/save' && request.method === 'POST') {\r\n      try {\r\n        // Check for admin authorization using secure token\r\n        const token = request.headers.get('X-Admin-Token') || request.headers.get('X-Admin-Key');\r\n        if (!verifyAdminToken(token)) {\r\n          return new Response('Unauthorized', { \r\n            status: 403,\r\n            headers: {\r\n              'Content-Type': 'text/plain',\r\n              'Access-Control-Allow-Origin': '*'\r\n            }\r\n          });\r\n        }\r\n        \r\n        const storyData = await request.json();\r\n        await env.STORY_STORAGE.put('story.json', JSON.stringify(storyData, null, 2));\r\n        return new Response('Story saved successfully!', { \r\n          status: 200,\r\n          headers: {\r\n            'Content-Type': 'text/plain',\r\n            'Access-Control-Allow-Origin': '*'\r\n          }\r\n        });\r\n      } catch (err) {\r\n        console.error('Save error:', err);\r\n        return new Response('Error: Could not save story data.', { status: 500 });\r\n      }\r\n    }\r\n    \r\n    // Handle OPTIONS for CORS preflight\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, OPTIONS',\r\n          'Access-Control-Allow-Headers': 'Content-Type, X-Admin-Token, X-Admin-Key'\r\n        }\r\n      });\r\n    }\r\n\r\n    // For any other route, return a 404 response\r\n    // The assets will be served automatically by the assets configuration\r\n    return new Response('Not Found', { status: 404 });\r\n  },\r\n};\r\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "import type { Middleware } from \"./common\";\n\ninterface JsonError {\n\tmessage?: string;\n\tname?: string;\n\tstack?: string;\n\tcause?: JsonError;\n}\n\nfunction reduceError(e: any): JsonError {\n\treturn {\n\t\tname: e?.name,\n\t\tmessage: e?.message ?? String(e),\n\t\tstack: e?.stack,\n\t\tcause: e?.cause === undefined ? undefined : reduceError(e.cause),\n\t};\n}\n\n// See comment in `bundle.ts` for details on why this is needed\nconst jsonError: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} catch (e: any) {\n\t\tconst error = reduceError(e);\n\t\treturn Response.json(error, {\n\t\t\tstatus: 500,\n\t\t\theaders: { \"MF-Experimental-Error-Stack\": \"true\" },\n\t\t});\n\t}\n};\n\nexport default jsonError;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\src\\\\index.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-ensure-req-body-drained.ts\";\nimport * as __MIDDLEWARE_1__ from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\middleware-miniflare3-json-error.ts\";\n\n\t\t\t\texport * from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\src\\\\index.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default,__MIDDLEWARE_1__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\.wrangler\\\\tmp\\\\bundle-iZJp1F\\\\middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\node_modules\\\\wrangler\\\\templates\\\\middleware\\\\common.ts\";\nimport type { WorkerEntrypointConstructor } from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\.wrangler\\\\tmp\\\\bundle-iZJp1F\\\\middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"C:\\\\Users\\\\watka\\\\Projects\\\\journeyman\\\\.wrangler\\\\tmp\\\\bundle-iZJp1F\\\\middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
